// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health.proto

#ifndef PROTOBUF_INCLUDED_health_2eproto
#define PROTOBUF_INCLUDED_health_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "component.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_health_2eproto 

namespace protobuf_health_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_health_2eproto
class Health;
class HealthDefaultTypeInternal;
extern HealthDefaultTypeInternal _Health_default_instance_;
namespace google {
namespace protobuf {
template<> ::Health* Arena::CreateMaybeMessage<::Health>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Health : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Health) */ {
 public:
  Health();
  virtual ~Health();

  Health(const Health& from);

  inline Health& operator=(const Health& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Health(Health&& from) noexcept
    : Health() {
    *this = ::std::move(from);
  }

  inline Health& operator=(Health&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Health& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Health* internal_default_instance() {
    return reinterpret_cast<const Health*>(
               &_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Health* other);
  friend void swap(Health& a, Health& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Health* New() const final {
    return CreateMaybeMessage<Health>(NULL);
  }

  Health* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Health>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Health& from);
  void MergeFrom(const Health& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Health* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CompStatus compstat = 9;
  int compstat_size() const;
  void clear_compstat();
  static const int kCompstatFieldNumber = 9;
  ::CompStatus compstat(int index) const;
  void set_compstat(int index, ::CompStatus value);
  void add_compstat(::CompStatus value);
  const ::google::protobuf::RepeatedField<int>& compstat() const;
  ::google::protobuf::RepeatedField<int>* mutable_compstat();

  // optional string name = 1 [default = ""];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 vbat = 2 [default = 0];
  bool has_vbat() const;
  void clear_vbat();
  static const int kVbatFieldNumber = 2;
  ::google::protobuf::uint32 vbat() const;
  void set_vbat(::google::protobuf::uint32 value);

  // optional uint32 vreg = 3 [default = 0];
  bool has_vreg() const;
  void clear_vreg();
  static const int kVregFieldNumber = 3;
  ::google::protobuf::uint32 vreg() const;
  void set_vreg(::google::protobuf::uint32 value);

  // optional uint32 isys = 4 [default = 0];
  bool has_isys() const;
  void clear_isys();
  static const int kIsysFieldNumber = 4;
  ::google::protobuf::uint32 isys() const;
  void set_isys(::google::protobuf::uint32 value);

  // optional uint32 tbat = 5 [default = 0];
  bool has_tbat() const;
  void clear_tbat();
  static const int kTbatFieldNumber = 5;
  ::google::protobuf::uint32 tbat() const;
  void set_tbat(::google::protobuf::uint32 value);

  // optional uint32 treg = 6 [default = 0];
  bool has_treg() const;
  void clear_treg();
  static const int kTregFieldNumber = 6;
  ::google::protobuf::uint32 treg() const;
  void set_treg(::google::protobuf::uint32 value);

  // optional uint32 tamb = 7 [default = 0];
  bool has_tamb() const;
  void clear_tamb();
  static const int kTambFieldNumber = 7;
  ::google::protobuf::uint32 tamb() const;
  void set_tamb(::google::protobuf::uint32 value);

  // optional uint32 trad = 8 [default = 0];
  bool has_trad() const;
  void clear_trad();
  static const int kTradFieldNumber = 8;
  ::google::protobuf::uint32 trad() const;
  void set_trad(::google::protobuf::uint32 value);

  // optional uint32 sats = 10 [default = 0];
  bool has_sats() const;
  void clear_sats();
  static const int kSatsFieldNumber = 10;
  ::google::protobuf::uint32 sats() const;
  void set_sats(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Health)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_vbat();
  void clear_has_vbat();
  void set_has_vreg();
  void clear_has_vreg();
  void set_has_isys();
  void clear_has_isys();
  void set_has_tbat();
  void clear_has_tbat();
  void set_has_treg();
  void clear_has_treg();
  void set_has_tamb();
  void clear_has_tamb();
  void set_has_trad();
  void clear_has_trad();
  void set_has_sats();
  void clear_has_sats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> compstat_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 vbat_;
  ::google::protobuf::uint32 vreg_;
  ::google::protobuf::uint32 isys_;
  ::google::protobuf::uint32 tbat_;
  ::google::protobuf::uint32 treg_;
  ::google::protobuf::uint32 tamb_;
  ::google::protobuf::uint32 trad_;
  ::google::protobuf::uint32 sats_;
  friend struct ::protobuf_health_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Health

// optional string name = 1 [default = ""];
inline bool Health::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Health::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Health::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Health::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Health::name() const {
  // @@protoc_insertion_point(field_get:Health.name)
  return name_.GetNoArena();
}
inline void Health::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Health.name)
}
#if LANG_CXX11
inline void Health::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Health.name)
}
#endif
inline void Health::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Health.name)
}
inline void Health::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Health.name)
}
inline ::std::string* Health::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Health.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Health::release_name() {
  // @@protoc_insertion_point(field_release:Health.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Health::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Health.name)
}

// optional uint32 vbat = 2 [default = 0];
inline bool Health::has_vbat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Health::set_has_vbat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Health::clear_has_vbat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Health::clear_vbat() {
  vbat_ = 0u;
  clear_has_vbat();
}
inline ::google::protobuf::uint32 Health::vbat() const {
  // @@protoc_insertion_point(field_get:Health.vbat)
  return vbat_;
}
inline void Health::set_vbat(::google::protobuf::uint32 value) {
  set_has_vbat();
  vbat_ = value;
  // @@protoc_insertion_point(field_set:Health.vbat)
}

// optional uint32 vreg = 3 [default = 0];
inline bool Health::has_vreg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Health::set_has_vreg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Health::clear_has_vreg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Health::clear_vreg() {
  vreg_ = 0u;
  clear_has_vreg();
}
inline ::google::protobuf::uint32 Health::vreg() const {
  // @@protoc_insertion_point(field_get:Health.vreg)
  return vreg_;
}
inline void Health::set_vreg(::google::protobuf::uint32 value) {
  set_has_vreg();
  vreg_ = value;
  // @@protoc_insertion_point(field_set:Health.vreg)
}

// optional uint32 isys = 4 [default = 0];
inline bool Health::has_isys() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Health::set_has_isys() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Health::clear_has_isys() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Health::clear_isys() {
  isys_ = 0u;
  clear_has_isys();
}
inline ::google::protobuf::uint32 Health::isys() const {
  // @@protoc_insertion_point(field_get:Health.isys)
  return isys_;
}
inline void Health::set_isys(::google::protobuf::uint32 value) {
  set_has_isys();
  isys_ = value;
  // @@protoc_insertion_point(field_set:Health.isys)
}

// optional uint32 tbat = 5 [default = 0];
inline bool Health::has_tbat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Health::set_has_tbat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Health::clear_has_tbat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Health::clear_tbat() {
  tbat_ = 0u;
  clear_has_tbat();
}
inline ::google::protobuf::uint32 Health::tbat() const {
  // @@protoc_insertion_point(field_get:Health.tbat)
  return tbat_;
}
inline void Health::set_tbat(::google::protobuf::uint32 value) {
  set_has_tbat();
  tbat_ = value;
  // @@protoc_insertion_point(field_set:Health.tbat)
}

// optional uint32 treg = 6 [default = 0];
inline bool Health::has_treg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Health::set_has_treg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Health::clear_has_treg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Health::clear_treg() {
  treg_ = 0u;
  clear_has_treg();
}
inline ::google::protobuf::uint32 Health::treg() const {
  // @@protoc_insertion_point(field_get:Health.treg)
  return treg_;
}
inline void Health::set_treg(::google::protobuf::uint32 value) {
  set_has_treg();
  treg_ = value;
  // @@protoc_insertion_point(field_set:Health.treg)
}

// optional uint32 tamb = 7 [default = 0];
inline bool Health::has_tamb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Health::set_has_tamb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Health::clear_has_tamb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Health::clear_tamb() {
  tamb_ = 0u;
  clear_has_tamb();
}
inline ::google::protobuf::uint32 Health::tamb() const {
  // @@protoc_insertion_point(field_get:Health.tamb)
  return tamb_;
}
inline void Health::set_tamb(::google::protobuf::uint32 value) {
  set_has_tamb();
  tamb_ = value;
  // @@protoc_insertion_point(field_set:Health.tamb)
}

// optional uint32 trad = 8 [default = 0];
inline bool Health::has_trad() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Health::set_has_trad() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Health::clear_has_trad() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Health::clear_trad() {
  trad_ = 0u;
  clear_has_trad();
}
inline ::google::protobuf::uint32 Health::trad() const {
  // @@protoc_insertion_point(field_get:Health.trad)
  return trad_;
}
inline void Health::set_trad(::google::protobuf::uint32 value) {
  set_has_trad();
  trad_ = value;
  // @@protoc_insertion_point(field_set:Health.trad)
}

// repeated .CompStatus compstat = 9;
inline int Health::compstat_size() const {
  return compstat_.size();
}
inline void Health::clear_compstat() {
  compstat_.Clear();
}
inline ::CompStatus Health::compstat(int index) const {
  // @@protoc_insertion_point(field_get:Health.compstat)
  return static_cast< ::CompStatus >(compstat_.Get(index));
}
inline void Health::set_compstat(int index, ::CompStatus value) {
  assert(::CompStatus_IsValid(value));
  compstat_.Set(index, value);
  // @@protoc_insertion_point(field_set:Health.compstat)
}
inline void Health::add_compstat(::CompStatus value) {
  assert(::CompStatus_IsValid(value));
  compstat_.Add(value);
  // @@protoc_insertion_point(field_add:Health.compstat)
}
inline const ::google::protobuf::RepeatedField<int>&
Health::compstat() const {
  // @@protoc_insertion_point(field_list:Health.compstat)
  return compstat_;
}
inline ::google::protobuf::RepeatedField<int>*
Health::mutable_compstat() {
  // @@protoc_insertion_point(field_mutable_list:Health.compstat)
  return &compstat_;
}

// optional uint32 sats = 10 [default = 0];
inline bool Health::has_sats() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Health::set_has_sats() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Health::clear_has_sats() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Health::clear_sats() {
  sats_ = 0u;
  clear_has_sats();
}
inline ::google::protobuf::uint32 Health::sats() const {
  // @@protoc_insertion_point(field_get:Health.sats)
  return sats_;
}
inline void Health::set_sats(::google::protobuf::uint32 value) {
  set_has_sats();
  sats_ = value;
  // @@protoc_insertion_point(field_set:Health.sats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_health_2eproto
