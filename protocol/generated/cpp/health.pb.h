// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_health_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_health_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_health_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_health_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_health_2eproto;
class Health;
class HealthDefaultTypeInternal;
extern HealthDefaultTypeInternal _Health_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Health* Arena::CreateMaybeMessage<::Health>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Health PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Health) */ {
 public:
  inline Health() : Health(nullptr) {};
  virtual ~Health();

  Health(const Health& from);
  Health(Health&& from) noexcept
    : Health() {
    *this = ::std::move(from);
  }

  inline Health& operator=(const Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline Health& operator=(Health&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Health& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Health* internal_default_instance() {
    return reinterpret_cast<const Health*>(
               &_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Health& a, Health& b) {
    a.Swap(&b);
  }
  inline void Swap(Health* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Health* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Health* New() const final {
    return CreateMaybeMessage<Health>(nullptr);
  }

  Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Health>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Health& from);
  void MergeFrom(const Health& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Health* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Health";
  }
  protected:
  explicit Health(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_health_2eproto);
    return ::descriptor_table_health_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVbatFieldNumber = 1,
    kVregFieldNumber = 2,
    kIsysFieldNumber = 3,
    kTbatFieldNumber = 4,
    kTregFieldNumber = 5,
    kTambFieldNumber = 6,
    kTradFieldNumber = 7,
    kSatsFieldNumber = 8,
  };
  // required uint32 vbat = 1 [default = 0];
  bool has_vbat() const;
  private:
  bool _internal_has_vbat() const;
  public:
  void clear_vbat();
  ::PROTOBUF_NAMESPACE_ID::uint32 vbat() const;
  void set_vbat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vbat() const;
  void _internal_set_vbat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 vreg = 2 [default = 0];
  bool has_vreg() const;
  private:
  bool _internal_has_vreg() const;
  public:
  void clear_vreg();
  ::PROTOBUF_NAMESPACE_ID::uint32 vreg() const;
  void set_vreg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vreg() const;
  void _internal_set_vreg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 isys = 3 [default = 0];
  bool has_isys() const;
  private:
  bool _internal_has_isys() const;
  public:
  void clear_isys();
  ::PROTOBUF_NAMESPACE_ID::uint32 isys() const;
  void set_isys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_isys() const;
  void _internal_set_isys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tbat = 4 [default = 0];
  bool has_tbat() const;
  private:
  bool _internal_has_tbat() const;
  public:
  void clear_tbat();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbat() const;
  void set_tbat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbat() const;
  void _internal_set_tbat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 treg = 5 [default = 0];
  bool has_treg() const;
  private:
  bool _internal_has_treg() const;
  public:
  void clear_treg();
  ::PROTOBUF_NAMESPACE_ID::uint32 treg() const;
  void set_treg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_treg() const;
  void _internal_set_treg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tamb = 6 [default = 0];
  bool has_tamb() const;
  private:
  bool _internal_has_tamb() const;
  public:
  void clear_tamb();
  ::PROTOBUF_NAMESPACE_ID::uint32 tamb() const;
  void set_tamb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tamb() const;
  void _internal_set_tamb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 trad = 7 [default = 0];
  bool has_trad() const;
  private:
  bool _internal_has_trad() const;
  public:
  void clear_trad();
  ::PROTOBUF_NAMESPACE_ID::uint32 trad() const;
  void set_trad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trad() const;
  void _internal_set_trad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sats = 8 [default = 0];
  bool has_sats() const;
  private:
  bool _internal_has_sats() const;
  public:
  void clear_sats();
  ::PROTOBUF_NAMESPACE_ID::uint32 sats() const;
  void set_sats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sats() const;
  void _internal_set_sats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Health)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vbat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vreg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 isys_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 treg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tamb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sats_;
  friend struct ::TableStruct_health_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Health

// required uint32 vbat = 1 [default = 0];
inline bool Health::_internal_has_vbat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Health::has_vbat() const {
  return _internal_has_vbat();
}
inline void Health::clear_vbat() {
  vbat_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_vbat() const {
  return vbat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::vbat() const {
  // @@protoc_insertion_point(field_get:Health.vbat)
  return _internal_vbat();
}
inline void Health::_internal_set_vbat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  vbat_ = value;
}
inline void Health::set_vbat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vbat(value);
  // @@protoc_insertion_point(field_set:Health.vbat)
}

// required uint32 vreg = 2 [default = 0];
inline bool Health::_internal_has_vreg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Health::has_vreg() const {
  return _internal_has_vreg();
}
inline void Health::clear_vreg() {
  vreg_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_vreg() const {
  return vreg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::vreg() const {
  // @@protoc_insertion_point(field_get:Health.vreg)
  return _internal_vreg();
}
inline void Health::_internal_set_vreg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  vreg_ = value;
}
inline void Health::set_vreg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vreg(value);
  // @@protoc_insertion_point(field_set:Health.vreg)
}

// required uint32 isys = 3 [default = 0];
inline bool Health::_internal_has_isys() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Health::has_isys() const {
  return _internal_has_isys();
}
inline void Health::clear_isys() {
  isys_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_isys() const {
  return isys_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::isys() const {
  // @@protoc_insertion_point(field_get:Health.isys)
  return _internal_isys();
}
inline void Health::_internal_set_isys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  isys_ = value;
}
inline void Health::set_isys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_isys(value);
  // @@protoc_insertion_point(field_set:Health.isys)
}

// required uint32 tbat = 4 [default = 0];
inline bool Health::_internal_has_tbat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Health::has_tbat() const {
  return _internal_has_tbat();
}
inline void Health::clear_tbat() {
  tbat_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_tbat() const {
  return tbat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::tbat() const {
  // @@protoc_insertion_point(field_get:Health.tbat)
  return _internal_tbat();
}
inline void Health::_internal_set_tbat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbat_ = value;
}
inline void Health::set_tbat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbat(value);
  // @@protoc_insertion_point(field_set:Health.tbat)
}

// required uint32 treg = 5 [default = 0];
inline bool Health::_internal_has_treg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Health::has_treg() const {
  return _internal_has_treg();
}
inline void Health::clear_treg() {
  treg_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_treg() const {
  return treg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::treg() const {
  // @@protoc_insertion_point(field_get:Health.treg)
  return _internal_treg();
}
inline void Health::_internal_set_treg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  treg_ = value;
}
inline void Health::set_treg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_treg(value);
  // @@protoc_insertion_point(field_set:Health.treg)
}

// required uint32 tamb = 6 [default = 0];
inline bool Health::_internal_has_tamb() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Health::has_tamb() const {
  return _internal_has_tamb();
}
inline void Health::clear_tamb() {
  tamb_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_tamb() const {
  return tamb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::tamb() const {
  // @@protoc_insertion_point(field_get:Health.tamb)
  return _internal_tamb();
}
inline void Health::_internal_set_tamb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tamb_ = value;
}
inline void Health::set_tamb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tamb(value);
  // @@protoc_insertion_point(field_set:Health.tamb)
}

// required uint32 trad = 7 [default = 0];
inline bool Health::_internal_has_trad() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Health::has_trad() const {
  return _internal_has_trad();
}
inline void Health::clear_trad() {
  trad_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_trad() const {
  return trad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::trad() const {
  // @@protoc_insertion_point(field_get:Health.trad)
  return _internal_trad();
}
inline void Health::_internal_set_trad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  trad_ = value;
}
inline void Health::set_trad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trad(value);
  // @@protoc_insertion_point(field_set:Health.trad)
}

// required uint32 sats = 8 [default = 0];
inline bool Health::_internal_has_sats() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Health::has_sats() const {
  return _internal_has_sats();
}
inline void Health::clear_sats() {
  sats_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_sats() const {
  return sats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::sats() const {
  // @@protoc_insertion_point(field_get:Health.sats)
  return _internal_sats();
}
inline void Health::_internal_set_sats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  sats_ = value;
}
inline void Health::set_sats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sats(value);
  // @@protoc_insertion_point(field_set:Health.sats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_health_2eproto
