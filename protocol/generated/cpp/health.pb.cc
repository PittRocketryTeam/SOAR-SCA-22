// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health.proto

#include "health.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class HealthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Health>
      _instance;
} _Health_default_instance_;
namespace protobuf_health_2eproto {
static void InitDefaultsHealth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Health_default_instance_;
    new (ptr) ::Health();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Health::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Health =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHealth}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Health.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, vbat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, vreg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, isys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, tbat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, treg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, tamb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, trad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, compstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Health, sats_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::Health)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Health_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "health.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014health.proto\032\017component.proto\"\277\001\n\006Heal"
      "th\022\016\n\004name\030\001 \001(\t:\000\022\017\n\004vbat\030\002 \001(\r:\0010\022\017\n\004v"
      "reg\030\003 \001(\r:\0010\022\017\n\004isys\030\004 \001(\r:\0010\022\017\n\004tbat\030\005 "
      "\001(\r:\0010\022\017\n\004treg\030\006 \001(\r:\0010\022\017\n\004tamb\030\007 \001(\r:\0010"
      "\022\017\n\004trad\030\010 \001(\r:\0010\022\035\n\010compstat\030\t \003(\0162\013.Co"
      "mpStatus\022\017\n\004sats\030\n \001(\r:\0010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "health.proto", &protobuf_RegisterTypes);
  ::protobuf_component_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_health_2eproto

// ===================================================================

void Health::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Health::kNameFieldNumber;
const int Health::kVbatFieldNumber;
const int Health::kVregFieldNumber;
const int Health::kIsysFieldNumber;
const int Health::kTbatFieldNumber;
const int Health::kTregFieldNumber;
const int Health::kTambFieldNumber;
const int Health::kTradFieldNumber;
const int Health::kCompstatFieldNumber;
const int Health::kSatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Health::Health()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_health_2eproto::scc_info_Health.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Health)
}
Health::Health(const Health& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      compstat_(from.compstat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&vbat_, &from.vbat_,
    static_cast<size_t>(reinterpret_cast<char*>(&sats_) -
    reinterpret_cast<char*>(&vbat_)) + sizeof(sats_));
  // @@protoc_insertion_point(copy_constructor:Health)
}

void Health::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vbat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sats_) -
      reinterpret_cast<char*>(&vbat_)) + sizeof(sats_));
}

Health::~Health() {
  // @@protoc_insertion_point(destructor:Health)
  SharedDtor();
}

void Health::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Health::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Health::descriptor() {
  ::protobuf_health_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_health_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Health& Health::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_health_2eproto::scc_info_Health.base);
  return *internal_default_instance();
}


void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compstat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&vbat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trad_) -
        reinterpret_cast<char*>(&vbat_)) + sizeof(trad_));
  }
  sats_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Health::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Health)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Health.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vbat = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vbat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vbat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vreg = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_vreg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vreg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 isys = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_isys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tbat = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tbat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 treg = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_treg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tamb = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tamb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tamb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trad = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_trad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CompStatus compstat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CompStatus_IsValid(value)) {
            add_compstat(static_cast< ::CompStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 9,
                 ::CompStatus_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_compstat())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sats = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_sats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Health)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Health)
  return false;
#undef DO_
}

void Health::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Health.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 vbat = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vbat(), output);
  }

  // optional uint32 vreg = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vreg(), output);
  }

  // optional uint32 isys = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isys(), output);
  }

  // optional uint32 tbat = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tbat(), output);
  }

  // optional uint32 treg = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->treg(), output);
  }

  // optional uint32 tamb = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tamb(), output);
  }

  // optional uint32 trad = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->trad(), output);
  }

  // repeated .CompStatus compstat = 9;
  for (int i = 0, n = this->compstat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->compstat(i), output);
  }

  // optional uint32 sats = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Health)
}

::google::protobuf::uint8* Health::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Health)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Health.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 vbat = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vbat(), target);
  }

  // optional uint32 vreg = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vreg(), target);
  }

  // optional uint32 isys = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isys(), target);
  }

  // optional uint32 tbat = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tbat(), target);
  }

  // optional uint32 treg = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->treg(), target);
  }

  // optional uint32 tamb = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tamb(), target);
  }

  // optional uint32 trad = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->trad(), target);
  }

  // repeated .CompStatus compstat = 9;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    9, this->compstat_, target);

  // optional uint32 sats = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Health)
  return target;
}

size_t Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Health)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CompStatus compstat = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->compstat_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->compstat(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 vbat = 2 [default = 0];
    if (has_vbat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vbat());
    }

    // optional uint32 vreg = 3 [default = 0];
    if (has_vreg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vreg());
    }

    // optional uint32 isys = 4 [default = 0];
    if (has_isys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isys());
    }

    // optional uint32 tbat = 5 [default = 0];
    if (has_tbat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbat());
    }

    // optional uint32 treg = 6 [default = 0];
    if (has_treg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treg());
    }

    // optional uint32 tamb = 7 [default = 0];
    if (has_tamb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tamb());
    }

    // optional uint32 trad = 8 [default = 0];
    if (has_trad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trad());
    }

  }
  // optional uint32 sats = 10 [default = 0];
  if (has_sats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sats());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Health::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Health)
  GOOGLE_DCHECK_NE(&from, this);
  const Health* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Health>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Health)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Health)
    MergeFrom(*source);
  }
}

void Health::MergeFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Health)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compstat_.MergeFrom(from.compstat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      vbat_ = from.vbat_;
    }
    if (cached_has_bits & 0x00000004u) {
      vreg_ = from.vreg_;
    }
    if (cached_has_bits & 0x00000008u) {
      isys_ = from.isys_;
    }
    if (cached_has_bits & 0x00000010u) {
      tbat_ = from.tbat_;
    }
    if (cached_has_bits & 0x00000020u) {
      treg_ = from.treg_;
    }
    if (cached_has_bits & 0x00000040u) {
      tamb_ = from.tamb_;
    }
    if (cached_has_bits & 0x00000080u) {
      trad_ = from.trad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_sats(from.sats());
  }
}

void Health::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Health::IsInitialized() const {
  return true;
}

void Health::Swap(Health* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Health::InternalSwap(Health* other) {
  using std::swap;
  compstat_.InternalSwap(&other->compstat_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vbat_, other->vbat_);
  swap(vreg_, other->vreg_);
  swap(isys_, other->isys_);
  swap(tbat_, other->tbat_);
  swap(treg_, other->treg_);
  swap(tamb_, other->tamb_);
  swap(trad_, other->trad_);
  swap(sats_, other->sats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Health::GetMetadata() const {
  protobuf_health_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_health_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Health* Arena::CreateMaybeMessage< ::Health >(Arena* arena) {
  return Arena::CreateInternal< ::Health >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
