// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orientation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_orientation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_orientation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_orientation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_orientation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_orientation_2eproto;
class Orientation;
class OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Orientation* Arena::CreateMaybeMessage<::Orientation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Orientation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Orientation) */ {
 public:
  inline Orientation() : Orientation(nullptr) {};
  virtual ~Orientation();

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation* New() const final {
    return CreateMaybeMessage<Orientation>(nullptr);
  }

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Orientation& from);
  void MergeFrom(const Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orientation";
  }
  protected:
  explicit Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_orientation_2eproto);
    return ::descriptor_table_orientation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuatXFieldNumber = 1,
    kQuatYFieldNumber = 2,
    kQuatZFieldNumber = 3,
    kQuatWFieldNumber = 4,
    kEulerXFieldNumber = 5,
    kEulerYFieldNumber = 6,
    kEulerZFieldNumber = 7,
    kOmegaXFieldNumber = 8,
    kOmegaYFieldNumber = 9,
    kOmegaZFieldNumber = 10,
    kAccelXFieldNumber = 11,
    kAccelYFieldNumber = 12,
    kAccelZFieldNumber = 13,
    kLonFieldNumber = 14,
    kLatFieldNumber = 15,
    kAltFieldNumber = 16,
  };
  // required sint32 quat_x = 1;
  bool has_quat_x() const;
  private:
  bool _internal_has_quat_x() const;
  public:
  void clear_quat_x();
  ::PROTOBUF_NAMESPACE_ID::int32 quat_x() const;
  void set_quat_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quat_x() const;
  void _internal_set_quat_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 quat_y = 2;
  bool has_quat_y() const;
  private:
  bool _internal_has_quat_y() const;
  public:
  void clear_quat_y();
  ::PROTOBUF_NAMESPACE_ID::int32 quat_y() const;
  void set_quat_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quat_y() const;
  void _internal_set_quat_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 quat_z = 3;
  bool has_quat_z() const;
  private:
  bool _internal_has_quat_z() const;
  public:
  void clear_quat_z();
  ::PROTOBUF_NAMESPACE_ID::int32 quat_z() const;
  void set_quat_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quat_z() const;
  void _internal_set_quat_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 quat_w = 4;
  bool has_quat_w() const;
  private:
  bool _internal_has_quat_w() const;
  public:
  void clear_quat_w();
  ::PROTOBUF_NAMESPACE_ID::int32 quat_w() const;
  void set_quat_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quat_w() const;
  void _internal_set_quat_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 euler_x = 5;
  bool has_euler_x() const;
  private:
  bool _internal_has_euler_x() const;
  public:
  void clear_euler_x();
  ::PROTOBUF_NAMESPACE_ID::int32 euler_x() const;
  void set_euler_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_euler_x() const;
  void _internal_set_euler_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 euler_y = 6;
  bool has_euler_y() const;
  private:
  bool _internal_has_euler_y() const;
  public:
  void clear_euler_y();
  ::PROTOBUF_NAMESPACE_ID::int32 euler_y() const;
  void set_euler_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_euler_y() const;
  void _internal_set_euler_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 euler_z = 7;
  bool has_euler_z() const;
  private:
  bool _internal_has_euler_z() const;
  public:
  void clear_euler_z();
  ::PROTOBUF_NAMESPACE_ID::int32 euler_z() const;
  void set_euler_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_euler_z() const;
  void _internal_set_euler_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 omega_x = 8;
  bool has_omega_x() const;
  private:
  bool _internal_has_omega_x() const;
  public:
  void clear_omega_x();
  ::PROTOBUF_NAMESPACE_ID::int32 omega_x() const;
  void set_omega_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_omega_x() const;
  void _internal_set_omega_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 omega_y = 9;
  bool has_omega_y() const;
  private:
  bool _internal_has_omega_y() const;
  public:
  void clear_omega_y();
  ::PROTOBUF_NAMESPACE_ID::int32 omega_y() const;
  void set_omega_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_omega_y() const;
  void _internal_set_omega_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 omega_z = 10;
  bool has_omega_z() const;
  private:
  bool _internal_has_omega_z() const;
  public:
  void clear_omega_z();
  ::PROTOBUF_NAMESPACE_ID::int32 omega_z() const;
  void set_omega_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_omega_z() const;
  void _internal_set_omega_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 accel_x = 11;
  bool has_accel_x() const;
  private:
  bool _internal_has_accel_x() const;
  public:
  void clear_accel_x();
  ::PROTOBUF_NAMESPACE_ID::int32 accel_x() const;
  void set_accel_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accel_x() const;
  void _internal_set_accel_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 accel_y = 12;
  bool has_accel_y() const;
  private:
  bool _internal_has_accel_y() const;
  public:
  void clear_accel_y();
  ::PROTOBUF_NAMESPACE_ID::int32 accel_y() const;
  void set_accel_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accel_y() const;
  void _internal_set_accel_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 accel_z = 13;
  bool has_accel_z() const;
  private:
  bool _internal_has_accel_z() const;
  public:
  void clear_accel_z();
  ::PROTOBUF_NAMESPACE_ID::int32 accel_z() const;
  void set_accel_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accel_z() const;
  void _internal_set_accel_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 lon = 14 [default = 0];
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  ::PROTOBUF_NAMESPACE_ID::int32 lon() const;
  void set_lon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lon() const;
  void _internal_set_lon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 lat = 15 [default = 0];
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  ::PROTOBUF_NAMESPACE_ID::int32 lat() const;
  void set_lat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lat() const;
  void _internal_set_lat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required sint32 alt = 16 [default = 0];
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  ::PROTOBUF_NAMESPACE_ID::int32 alt() const;
  void set_alt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alt() const;
  void _internal_set_alt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orientation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 quat_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 quat_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 quat_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 quat_w_;
  ::PROTOBUF_NAMESPACE_ID::int32 euler_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 euler_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 euler_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 omega_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 omega_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 omega_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 accel_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 accel_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 accel_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 lon_;
  ::PROTOBUF_NAMESPACE_ID::int32 lat_;
  ::PROTOBUF_NAMESPACE_ID::int32 alt_;
  friend struct ::TableStruct_orientation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Orientation

// required sint32 quat_x = 1;
inline bool Orientation::_internal_has_quat_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Orientation::has_quat_x() const {
  return _internal_has_quat_x();
}
inline void Orientation::clear_quat_x() {
  quat_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_quat_x() const {
  return quat_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::quat_x() const {
  // @@protoc_insertion_point(field_get:Orientation.quat_x)
  return _internal_quat_x();
}
inline void Orientation::_internal_set_quat_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  quat_x_ = value;
}
inline void Orientation::set_quat_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quat_x(value);
  // @@protoc_insertion_point(field_set:Orientation.quat_x)
}

// required sint32 quat_y = 2;
inline bool Orientation::_internal_has_quat_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Orientation::has_quat_y() const {
  return _internal_has_quat_y();
}
inline void Orientation::clear_quat_y() {
  quat_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_quat_y() const {
  return quat_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::quat_y() const {
  // @@protoc_insertion_point(field_get:Orientation.quat_y)
  return _internal_quat_y();
}
inline void Orientation::_internal_set_quat_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quat_y_ = value;
}
inline void Orientation::set_quat_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quat_y(value);
  // @@protoc_insertion_point(field_set:Orientation.quat_y)
}

// required sint32 quat_z = 3;
inline bool Orientation::_internal_has_quat_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Orientation::has_quat_z() const {
  return _internal_has_quat_z();
}
inline void Orientation::clear_quat_z() {
  quat_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_quat_z() const {
  return quat_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::quat_z() const {
  // @@protoc_insertion_point(field_get:Orientation.quat_z)
  return _internal_quat_z();
}
inline void Orientation::_internal_set_quat_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  quat_z_ = value;
}
inline void Orientation::set_quat_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quat_z(value);
  // @@protoc_insertion_point(field_set:Orientation.quat_z)
}

// required sint32 quat_w = 4;
inline bool Orientation::_internal_has_quat_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Orientation::has_quat_w() const {
  return _internal_has_quat_w();
}
inline void Orientation::clear_quat_w() {
  quat_w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_quat_w() const {
  return quat_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::quat_w() const {
  // @@protoc_insertion_point(field_get:Orientation.quat_w)
  return _internal_quat_w();
}
inline void Orientation::_internal_set_quat_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  quat_w_ = value;
}
inline void Orientation::set_quat_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quat_w(value);
  // @@protoc_insertion_point(field_set:Orientation.quat_w)
}

// required sint32 euler_x = 5;
inline bool Orientation::_internal_has_euler_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Orientation::has_euler_x() const {
  return _internal_has_euler_x();
}
inline void Orientation::clear_euler_x() {
  euler_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_euler_x() const {
  return euler_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::euler_x() const {
  // @@protoc_insertion_point(field_get:Orientation.euler_x)
  return _internal_euler_x();
}
inline void Orientation::_internal_set_euler_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  euler_x_ = value;
}
inline void Orientation::set_euler_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_euler_x(value);
  // @@protoc_insertion_point(field_set:Orientation.euler_x)
}

// required sint32 euler_y = 6;
inline bool Orientation::_internal_has_euler_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Orientation::has_euler_y() const {
  return _internal_has_euler_y();
}
inline void Orientation::clear_euler_y() {
  euler_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_euler_y() const {
  return euler_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::euler_y() const {
  // @@protoc_insertion_point(field_get:Orientation.euler_y)
  return _internal_euler_y();
}
inline void Orientation::_internal_set_euler_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  euler_y_ = value;
}
inline void Orientation::set_euler_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_euler_y(value);
  // @@protoc_insertion_point(field_set:Orientation.euler_y)
}

// required sint32 euler_z = 7;
inline bool Orientation::_internal_has_euler_z() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Orientation::has_euler_z() const {
  return _internal_has_euler_z();
}
inline void Orientation::clear_euler_z() {
  euler_z_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_euler_z() const {
  return euler_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::euler_z() const {
  // @@protoc_insertion_point(field_get:Orientation.euler_z)
  return _internal_euler_z();
}
inline void Orientation::_internal_set_euler_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  euler_z_ = value;
}
inline void Orientation::set_euler_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_euler_z(value);
  // @@protoc_insertion_point(field_set:Orientation.euler_z)
}

// required sint32 omega_x = 8;
inline bool Orientation::_internal_has_omega_x() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Orientation::has_omega_x() const {
  return _internal_has_omega_x();
}
inline void Orientation::clear_omega_x() {
  omega_x_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_omega_x() const {
  return omega_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::omega_x() const {
  // @@protoc_insertion_point(field_get:Orientation.omega_x)
  return _internal_omega_x();
}
inline void Orientation::_internal_set_omega_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  omega_x_ = value;
}
inline void Orientation::set_omega_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_omega_x(value);
  // @@protoc_insertion_point(field_set:Orientation.omega_x)
}

// required sint32 omega_y = 9;
inline bool Orientation::_internal_has_omega_y() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Orientation::has_omega_y() const {
  return _internal_has_omega_y();
}
inline void Orientation::clear_omega_y() {
  omega_y_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_omega_y() const {
  return omega_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::omega_y() const {
  // @@protoc_insertion_point(field_get:Orientation.omega_y)
  return _internal_omega_y();
}
inline void Orientation::_internal_set_omega_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  omega_y_ = value;
}
inline void Orientation::set_omega_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_omega_y(value);
  // @@protoc_insertion_point(field_set:Orientation.omega_y)
}

// required sint32 omega_z = 10;
inline bool Orientation::_internal_has_omega_z() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Orientation::has_omega_z() const {
  return _internal_has_omega_z();
}
inline void Orientation::clear_omega_z() {
  omega_z_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_omega_z() const {
  return omega_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::omega_z() const {
  // @@protoc_insertion_point(field_get:Orientation.omega_z)
  return _internal_omega_z();
}
inline void Orientation::_internal_set_omega_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  omega_z_ = value;
}
inline void Orientation::set_omega_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_omega_z(value);
  // @@protoc_insertion_point(field_set:Orientation.omega_z)
}

// required sint32 accel_x = 11;
inline bool Orientation::_internal_has_accel_x() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Orientation::has_accel_x() const {
  return _internal_has_accel_x();
}
inline void Orientation::clear_accel_x() {
  accel_x_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_accel_x() const {
  return accel_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::accel_x() const {
  // @@protoc_insertion_point(field_get:Orientation.accel_x)
  return _internal_accel_x();
}
inline void Orientation::_internal_set_accel_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  accel_x_ = value;
}
inline void Orientation::set_accel_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accel_x(value);
  // @@protoc_insertion_point(field_set:Orientation.accel_x)
}

// required sint32 accel_y = 12;
inline bool Orientation::_internal_has_accel_y() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Orientation::has_accel_y() const {
  return _internal_has_accel_y();
}
inline void Orientation::clear_accel_y() {
  accel_y_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_accel_y() const {
  return accel_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::accel_y() const {
  // @@protoc_insertion_point(field_get:Orientation.accel_y)
  return _internal_accel_y();
}
inline void Orientation::_internal_set_accel_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  accel_y_ = value;
}
inline void Orientation::set_accel_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accel_y(value);
  // @@protoc_insertion_point(field_set:Orientation.accel_y)
}

// required sint32 accel_z = 13;
inline bool Orientation::_internal_has_accel_z() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Orientation::has_accel_z() const {
  return _internal_has_accel_z();
}
inline void Orientation::clear_accel_z() {
  accel_z_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_accel_z() const {
  return accel_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::accel_z() const {
  // @@protoc_insertion_point(field_get:Orientation.accel_z)
  return _internal_accel_z();
}
inline void Orientation::_internal_set_accel_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  accel_z_ = value;
}
inline void Orientation::set_accel_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accel_z(value);
  // @@protoc_insertion_point(field_set:Orientation.accel_z)
}

// required sint32 lon = 14 [default = 0];
inline bool Orientation::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Orientation::has_lon() const {
  return _internal_has_lon();
}
inline void Orientation::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_lon() const {
  return lon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::lon() const {
  // @@protoc_insertion_point(field_get:Orientation.lon)
  return _internal_lon();
}
inline void Orientation::_internal_set_lon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  lon_ = value;
}
inline void Orientation::set_lon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:Orientation.lon)
}

// required sint32 lat = 15 [default = 0];
inline bool Orientation::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Orientation::has_lat() const {
  return _internal_has_lat();
}
inline void Orientation::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_lat() const {
  return lat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::lat() const {
  // @@protoc_insertion_point(field_get:Orientation.lat)
  return _internal_lat();
}
inline void Orientation::_internal_set_lat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  lat_ = value;
}
inline void Orientation::set_lat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:Orientation.lat)
}

// required sint32 alt = 16 [default = 0];
inline bool Orientation::_internal_has_alt() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Orientation::has_alt() const {
  return _internal_has_alt();
}
inline void Orientation::clear_alt() {
  alt_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::_internal_alt() const {
  return alt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Orientation::alt() const {
  // @@protoc_insertion_point(field_get:Orientation.alt)
  return _internal_alt();
}
inline void Orientation::_internal_set_alt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  alt_ = value;
}
inline void Orientation::set_alt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:Orientation.alt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_orientation_2eproto
